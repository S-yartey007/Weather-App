(()=>{"use strict";var __webpack_modules__={596:()=>{eval('\n;// ./src/modules/DataModel.js\nclass WeatherData {\n  constructor(\n    location,\n    temperature,\n    description,\n    humidity,\n    windSpeed,\n    forecast\n  ) {\n    this.location = location;\n    this.temperature = temperature;\n    this.description = description;\n    this.humidity = humidity;\n    this.windSpeed = windSpeed;\n    this.forecast = forecast;\n  }\n}\n\nfunction normalizeWeatherData(apidata) {\n  validateWeatherData(apidata);\n  return new WeatherData(\n    apidata.location,\n    apidata.temperature,\n    apidata.description,\n    apidata.humidity,\n    apidata.windSpeed,\n    apidata.forecast\n  );\n}\n\nfunction validateWeatherData(apidata) {\n  if (!apidata.location || !apidata.description) {\n    throw new Error("Invalid data from API");\n  }\n}\n\nfunction convertTemperature(temp, toUnit) {\n  if (toUnit === "F") {\n    return (temp * 9) / 5 + 32; //to fahrenheit\n  } else if (toUnit === "C") {\n    return temp;\n  }\n}\n\nclass WeatherState {\n  constructor() {\n    this.currentWeather = null;\n    this.forcast = [];\n    this.unitGroup = "metric";\n  }\n  setCurrentWeather(data) {\n    this.currentWeather = normalizeWeatherData(data);\n  }\n\n  setForecast(data) {\n    this.forcast = normalizeWeatherData(data).forecast;\n  }\n\n  setUnitGroup(unitGroup) {\n    this.unitGroup = unitGroup;\n  }\n\n  getCurrentWeather() {\n    return this.currentWeather;\n  }\n  getForecast() {\n    return this.forcast;\n  }\n  getUnitGroup() {\n    return this.unitGroup;\n  }\n  convertTemperature(toUnit) {\n    if (toUnit === "F") {\n      return (this.currentWeather.temperature * 9) / 5 + 32; //to fahrenheit\n    } else if (toUnit === "C") {\n      return this.currentWeather.temperature;\n    }\n  }\n}\nconst weatherDataModel = new WeatherState();\n\n\n;// ./src/modules/UIHandler.js\n\n\nconst UIhandler = (function () {\n  const main = document.querySelector("main");\n\n  function renderCurrentWeather(weatherData) {\n    const weatherContainer = main.querySelector(".current-weather");\n    weatherContainer.innerHTML = "";\n    const location = document.createElement("div");\n    const temperature = document.createElement("div");\n    const description = document.createElement("div");\n    weatherContainer.appendChild(location);\n    weatherContainer.appendChild(temperature);\n    weatherContainer.appendChild(description);\n    location.textContent = weatherData.location;\n    temperature.textContent = `Temperature : ${\n      weatherData.temperature\n    }, using ${weatherDataModel.getUnitGroup()} unit group`;\n    description.textContent = `Conditions : ${weatherData.description}`;\n  }\n\n  function renderForecast(forecastData) {\n    const forecastContainer = main.querySelector(".forecast-section");\n    forecastContainer.innerHTML = "";\n\n    forecastData.forEach((day) => {\n      const dayElem = document.createElement("div");\n      dayElem.classList.add("forecast-div");\n      dayElem.innerHTML = `\n        <h2>${day.date}</h2>\n        <p>High: ${day.high}</p>\n        <p>Low: ${day.low}</p>\n        <p>Humidity: ${day.humidity}</p>\n        <p>${day.condition}</p>\n        `;\n      forecastContainer.appendChild(dayElem);\n    });\n  }\n  function rendGifImage(url) {\n    const gifContainer = main.querySelector(".weather-image-container");\n    gifContainer.innerHTML = "";\n    const gif = document.createElement("img");\n    gif.src = url;\n    gifContainer.appendChild(gif);\n  }\n  function clearUI() {\n    const weatherContainer = main.querySelector(".current-weather");\n    const forecastContainer = main.querySelector(".forecast-section");\n    const imageContainer = main.querySelector(".weather-image-container");\n    weatherContainer.innerHTML = "";\n    forecastContainer.innerHTML = "";\n    imageContainer.innerHTML = "";\n  }\n\n  function updateWeatherDisplay() {\n    const weatherData = weatherDataModel.getCurrentWeather();\n    const forecastData = weatherDataModel.getForecast();\n    renderCurrentWeather(weatherData);\n    renderForecast(forecastData);\n  }\n\n  function displayErrors(message) {\n    const errorDialog = main.querySelector(".error-dialog");\n    const megElement = main.querySelector(".message");\n    megElement.textContent = message;\n    errorDialog.showModal();\n  }\n\n  function showLoading() {\n    const loader = main.querySelector(".loading-spinner");\n    loader.style.display = "block";\n  }\n\n  function hideLoading() {\n    const loader = main.querySelector(".loading-spinner");\n    loader.style.display = "none";\n  }\n\n  return {\n    renderCurrentWeather,\n    renderForecast,\n    displayErrors,\n    updateWeatherDisplay,\n    showLoading,\n    hideLoading,\n    clearUI,\n    rendGifImage,\n  };\n})();\n\n\n\n;// ./src/modules/WeatherAPI.js\n\n\n\nconst WeatherAPI = (function weatherAPI() {\n  function buildUrl(location, unit) {\n    const API_KEY = "YVCJAP7KPRB8ZPY38Z6QGYQ8C";\n    return `https://weather.visualcrossing.com/VisualCrossingWebServices/rest/services/timeline/${location}?unitGroup=${unit}&key=${API_KEY}`;\n  }\n\n  async function getWeatherData(location, unitGroup = "metric") {\n    weatherDataModel.setUnitGroup(unitGroup);\n    const url = buildUrl(location, unitGroup === "metric" ? "metric" : "us");\n    try {\n      UIhandler.showLoading();\n      UIhandler.clearUI();\n      const response = await fetch(url, { mode: "cors" });\n      if (!response.ok) {\n        throw new Error(`Error: ${response.statusText}`);\n      }\n      const body = await response.json();\n      console.log(body);\n      return dataParser(body);\n    } catch (error) {\n      console.error(error);\n      UIhandler.displayErrors(errorHandler(error));\n    } finally {\n      UIhandler.hideLoading();\n    }\n  }\n  function errorHandler(error) {\n    if (error.message.includes("Network")) {\n      return "Network error, please check your connection";\n    } else if (error.message.includes("404")) {\n      return "Location not found. Please a try a different search";\n    } else {\n      return "An unexpected error occured.";\n    }\n  }\n  function dataParser(data) {\n    return {\n      location: data.address,\n      temperature: data.currentConditions.temp,\n      description: data.currentConditions.conditions,\n      humidity: data.currentConditions.humidity,\n      windspeed: data.currentConditions.windspeed,\n      forecast: data.days.map((day) => ({\n        date: day.datetime,\n        high: day.tempmax,\n        low: day.tempmin,\n        humidity: day.humidity,\n        condition: day.conditions,\n      })),\n    };\n  }\n\n  return {\n    getWeatherData,\n  };\n})();\n\n\n\n;// ./src/modules/GifAPI.js\n\n\nconst GifAPI = (function () {\n  function buildUrl(query) {\n    const API_KEY = "GajOuPkr0U5GonTGky06A0I3MyZoUkkr";\n    return `https://api.giphy.com/v1/gifs/translate?api_key=${API_KEY}&s=weather${query}\'`;\n  }\n\n  async function getImageGifs(query) {\n    const url = buildUrl(query);\n    try {\n      UIhandler.showLoading();\n      const response = await fetch(url);\n      const body = await response.json();\n      return body.data.images.original.url;\n    } catch (error) {\n      UIhandler.displayErrors(error.message);\n    } finally {\n      UIhandler.hideLoading();\n    }\n  }\n\n  return {\n    getImageGifs,\n  };\n})();\n\n\n\n;// ./src/index.js\n\n\n\n\nasync function AppController() {\n  const data = await WeatherAPI.getWeatherData("Accra,Weija");\n  weatherDataModel.setCurrentWeather(data);\n  weatherDataModel.setForecast(data);\n  const weatherData = weatherDataModel.getCurrentWeather();\n  const imageUrl = GifAPI.getImageGifs(weatherData.description);\n  imageUrl.then((url) => UIhandler.rendGifImage(url));\n  UIhandler.renderCurrentWeather(weatherData);\n  UIhandler.renderForecast(weatherDataModel.getForecast());\n}\n\nAppController();\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///596\n')}},__webpack_exports__={};__webpack_modules__[596]()})();